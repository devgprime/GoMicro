version: '3'

services:

  buzz:
    image: flunk/micro-buzz:1.0.0
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == docker-desktop
    volumes:
      - buzz_data:/data
      - buzz_config:/config
    ports:
      - "80:80"
      - "444:443"

  front-end:
    image: flunk/front-end:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  # broker-service - main entry point; we call this from the front end
  broker-service:
    image: flunk/broker-service:1.0.1
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1

  # listener-service - watches rabbitmq for messages
  listener-service:
    image: flunk/listener-service:1.0.0
    deploy:
      mode: replicated
      replicas: 2

  # authentication-service - handles user auth
  authentication-service:
    image: flunk/authentication-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"

  # logger-service: a service to store logs
  logger-service:
    image: flunk/logger-service:1.0.0
    ports:
      - "8082:80"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./logger-service/templates/:/app/templates

  # mail-service - handles sending mail
  mail-service:
    image: flunk/mail-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "Dave Boron"
      FROM_ADDRESS: dave.boron@example.com

  # rabbitmq: the rabbitmq server
  rabbitmq:
    image: 'rabbitmq:3-management'
    deploy:
      mode: global
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq/

  # mailhog: a fake smtp server with a web interface
  mailhog:
    image: 'mailhog/mailhog:latest'
    ports:
      - "8025:8025"
    deploy:
      mode: global

  # mongo: start MongoDB and ensure that data is stored to a mounted volume
  mongo:
    image: 'mongo:4.2.17-bionic'
    ports:
      - "27017:27017"
    deploy:
      mode: global
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  # postgres: start Postgres, and ensure that data is stored to a mounted volume
  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    deploy:
      mode: global
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  # etcd: start etcd server
  etcd:
    image: docker.io/bitnami/etcd:3
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    deploy:
      mode: global
    volumes:
      - ./db-data/etcd/:/bitnami/etcd

volumes:
  buzz_data:
    external: true
  buzz_config: